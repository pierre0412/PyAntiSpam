#!/bin/bash
# Script de test pour v√©rifier que le r√©entra√Ænement fonctionne dans Docker

set -e

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[TEST]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üß™ Test du r√©entra√Ænement ML dans Docker"
echo "========================================"

# 1. V√©rifier que le container tourne
if ! docker ps --format '{{.Names}}' | grep -q "^pyantispam$"; then
    log_error "Le container pyantispam n'est pas en cours d'ex√©cution"
    echo "Lancez d'abord: ./scripts/docker-run.sh start"
    exit 1
fi

log_info "Container pyantispam trouv√© ‚úì"

# 2. V√©rifier les stats avant r√©entra√Ænement
log_info "Stats avant r√©entra√Ænement:"
docker exec pyantispam python -m pyantispam.cli stats | grep "R√©entra√Ænements ML"

# 3. Lancer le r√©entra√Ænement
log_info "Lancement du r√©entra√Ænement..."
docker exec pyantispam python force_retrain.py

# 4. V√©rifier les stats apr√®s r√©entra√Ænement
log_info "Stats apr√®s r√©entra√Ænement:"
docker exec pyantispam python -m pyantispam.cli stats | grep "R√©entra√Ænements ML"

# 5. V√©rifier que le fichier de mod√®le a √©t√© mis √† jour
log_info "V√©rification du mod√®le ML..."
if docker exec pyantispam ls -la data/spam_model.pkl | grep -q "$(date +%Y-%m-%d)"; then
    log_info "Mod√®le ML mis √† jour aujourd'hui ‚úì"
else
    log_warn "Le mod√®le ML n'a pas √©t√© mis √† jour r√©cemment"
fi

# 6. Test avec docker-run.sh
log_info "Test de la commande ./scripts/docker-run.sh retrain..."
./scripts/docker-run.sh retrain

echo ""
log_info "üéâ Test termin√© ! Le r√©entra√Ænement Docker fonctionne correctement."
echo ""
echo "üí° Commandes disponibles:"
echo "   ./scripts/docker-run.sh stats   - Voir les statistiques"
echo "   ./scripts/docker-run.sh retrain - Forcer un r√©entra√Ænement"